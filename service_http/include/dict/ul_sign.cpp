#include <ul_util.h>
#include <ul_log.h>
#include "ul_prime.h"
#include <assert.h>
#include <openssl/md5.h>

#define MAX_PRIME_0 16777213
#define MAX_PRIME_1 13999981
#define MAX_PRIME_2 11999989

unsigned char rearr256_1[256]={
    103,198,105,115, 81,255, 74,236, 41,205,186,171,242,251,227, 70,
    124,194, 84,248, 27,232,231,141,118, 90, 46, 99, 51,159,201,154,
    102, 50, 13,183, 49, 88,163, 37, 93,  5, 23,233, 94,212,178,155,
    180, 17, 14,130,116, 65, 33, 61,220,135,112, 62,161,225,252,  1,
    126,151,234,107,150,143, 56, 92, 42,176, 59,175, 60, 24,219,  2,
     26,254, 67,250,170, 58,209,230,148,117,216,190, 97,137,249,187,
    168,153, 15,149,177,235,241,179,239,247,  0,229,202, 11,203,208,
     72, 71,100,189, 31, 35, 30, 28,123,197, 20, 75,121, 36,158,  9,
    172, 16, 80, 21,111, 34, 25,125,245,127,164, 19,181, 78,152,224,
     77, 52,188, 95,119,108,134, 43, 85,162,  4,211, 54,226,240,228,
     79, 73,253,169,  8,138, 10,213, 68, 91,243,142, 76,215, 45, 66,
      6,196,132,173,222, 48,246, 32,133,  7,244,185,195,217,160,120,
    218,106, 83,144, 87,238,207, 96,210, 53,101, 63, 98,128,165, 89,
    140, 12,192,131, 47, 39, 22,147,184,109,182,193,199,237, 18, 69,
     57,157,174,104,122,166, 55,110,  3, 40,139, 86,145,114,129,113,
    206,167,191,214,146,221,136, 38,156, 82,200, 29, 44,204,223, 64
};


unsigned char rearr256_2[256]={
    180,162,  8,135,  2,229,187, 61,199,230,152,228,223,220,206,244,
    209,156,226, 65,100,166, 96,175,234, 99,  6,164,211,129, 54, 35,
     62, 15, 37,202, 98,235,176,250,207,144,214,157,132,168, 57,102,
    233,158, 13, 73, 77,247,173, 84,155,128,213,210,  7,248, 16, 22,
     29, 52,225,127, 31,145,121,238, 33, 79,139,196, 12, 25, 42, 17,
    215,  4,172, 87,217,126, 95,143,117,195, 86,109,232,208,  9, 53,
     91, 45,188, 14,130, 56, 50,147,103,198,224,160, 60,146, 59, 69,
    122, 21,112, 51,131,239, 18,197, 68,171,218,137, 80,105,240, 55,
    114,153, 81,254,193,189,200,  5,104,167,236,113,231, 48, 26, 44,
    151,163, 83, 20,203, 82,249, 19,216,116,108, 27, 90,119,150, 43,
    205, 88,115,142, 49, 89, 63,  0,178, 78, 28, 46, 66,177,138, 47,
     10,251, 39, 64,149,246, 38,243,110,182,123, 32,107, 94, 36,227,
     72,118, 34,136, 92,191,222, 41,185,  1,120,141,174,245,212, 40,
    184,181,133,204, 70,101,201,154,  3, 75,255,179,140,159,219, 76,
    237,170,148,186,252,165,106,241,161,194,192, 71, 97, 11,190,221,
     67, 85,169,124,125, 93, 30, 23,242, 24,134, 74, 58,183,253,111,
};


unsigned int remain256_0[256]={
           1,     256,   65536,       3,     768,  196608,       9,    2304,
      589824,      27,    6912, 1769472,      81,   20736, 5308416,     243,
       62208,15925248,     729,  186624,14221318,    2187,  559872, 9109528,
        6561, 1679616,10551371,   19683, 5038848,14876900,   59049,15116544,
    11076274,  177147,11795206,16451609,  531441, 1831192,15800401, 1594323,
     5493576,13846777, 4782969,16480728, 7985905,14348907,15887758, 7180502,
     9492295,14108848, 4764293,11699672, 8772118,14292879, 1544590, 9539141,
     9324211, 4633770,11840210,11195420,13901310, 1966204,   31834, 8149504,
     5898612,   95502, 7671299,  918623,  286506, 6236684, 2755869,  859518,
     1932839, 8267607, 2578554, 5798517, 8025608, 7735662,  618338, 7299611,
     6429773, 1855014, 5121620, 2512106, 5565042,15364860, 7536318,16695126,
    12540154, 5831741,16530952, 4066036,  718010,16038430,12198108, 2154030,
    14560864, 3039898, 6462090,10128166, 9119694, 2609057,13607285,10581869,
     7827171, 7267429,14968394, 6704300, 5025074,11350756, 3335687,15075222,
      497842,10007061,11671240, 1493526,13243970, 1459294, 4480578, 6177484,
     4377882,13441734, 1755239,13133646, 6770776, 5265717, 5846512, 3535115,
    15797151,  762323,10605345,13837027, 2286969,15038822, 7956655, 6860907,
    11562040, 7092752, 3805508, 1131694, 4501043,11416524, 3395082,13503129,
      695146,10185246, 6954961, 2085438,13778525, 4087670, 6256314, 7781149,
    12263010, 1991729, 6566234, 3234604, 5975187, 2921489, 9703812, 1148348,
     8764467,12334223, 3445044, 9516188, 3448243,10335132,11771351,10344729,
    14228183, 1759627,14256974, 9130123, 5278881, 9216496,10613156,15836643,
    10872275,15062255,13955503,15839612,11632339, 8312083,13964410, 1342591,
     8159036, 8338804, 4027773, 7699895, 8239199,12083319, 6322472, 7940384,
     2695531, 2190203, 7043939, 8086593, 6570609, 4354604, 7482566, 2934614,
    13063812, 5670485, 8803842, 5637010,  234242, 9634313,  133817,  702726,
    12125726,  401451, 2108178, 2822752, 1204353, 6324534, 8468256, 3613059,
     2196389, 8627555,10839177, 6589167, 9105452,15740318, 2990288,10539143,
    13666528, 8970864,14840216, 7445158,10135379,10966222, 5558261,13628924,
    16121453,16674783, 7332346,14809933,16469923, 5219825,10875373,15855343,
    15659475,15848906,14011603,13423999,13992292, 8480383, 6717571, 8422450,
     8663936, 3375500, 8490137, 9214595,10126500, 8693198,10866572,13602287
};


unsigned int remain256_1[256]={
           1,     256,   65536, 2777235,10973110, 9119960,10712914,12509689,
    10484716,10090925, 7280296, 1758303, 2126176,12301778,13259424, 6417142,
     4790575, 8388853, 5549275, 6616319,13779944,13670433,13635579, 4712955,
     2518114,  638058, 9343057,11825822, 3414536, 6122394,13334973,11757705,
    13976546, 8000621, 4161750, 1409444,10818139,11447327, 4519683, 9040406,
     4347071, 6851677, 4031687,10113259,12997800, 9441303, 8976836, 2073132,
    12722495, 8963128,12563865,10353791, 4574087, 8967849,13772441,11749665,
    11918306,13090459, 5162045, 5485306, 4240236, 7501879, 2483627, 5809367,
     3199966, 7192398, 7256377, 9635020, 2568464,13527658, 5085141,13797844,
     4252852,10731575, 3286924, 1453684, 8143598,12763900, 5562827,10085631,
     5925032, 4810244,13424117, 6578607, 4125672, 6173457,12407120,12227014,
     8119821, 6676988, 1311246,13679413, 1934478, 5227033, 8122253, 7299580,
     6695007, 5924110, 4574212, 8999849, 7964460, 8904515,11558918, 5087017,
      278119, 1198559,12831503, 8869214, 2521862, 1597546, 2972327, 4916738,
    12686619,13778853,13391137,12135708,12745447,  838859, 4748189,11538018,
    13736598, 2573857,  908285, 8521264,11446529, 4315395,12742602,  110539,
      298022, 6293727, 1196297,12252431,  626592, 6407761, 2389039, 9594801,
     6272381, 9731702,13319075, 7687817, 8083812,11458665, 7422211,10088581,
     6680232, 2141710, 2278501, 9297035,   44190,11312640,12039754, 2181204,
    12388965, 7579334, 8312126,13907125, 4228826, 4580919,10716841,13515001,
     1844949,10307571, 6741748, 3889825, 1796549,11917152,12795035,13533387,
     6551765,11254101,11053751, 1764094, 3608672,13821267,10249140, 5783393,
    10550603,12958016,13256580, 5689078,  405944, 5921797, 3982084,11414872,
    10211184,10066638, 1062824, 6083305, 3328189,12017524,10490305,11521709,
     9561494,11745770,10921186, 9827397, 9817033, 7163849,13947814,  645229,
    11178833, 5785124,10993739,  401003, 4656901, 2168271, 9078117,    1106,
      283136, 2482911, 5626071,12276114, 6689440, 4498958, 3734806, 4111628,
     2578193, 2018301,12685740,13553829,11784917, 6942837,13368666, 6383132,
    10083996, 5506472, 9658732, 8638736,13519399, 2970837, 4535298,13037846,
     5693098, 1435064, 3376878,10481927, 9376941, 6500145,12039362, 2080852,
      698834,10901732, 4847173, 8877960, 4760838,  776181, 2702602, 5867043,
     3965041, 7051864,13279616,11586294,12095273, 2394087,10887089, 1098565,
};



unsigned int remain256_2[256]={
           1,     256,   65536, 4777227,10971223,  635662, 6729615, 6783013,
     8452912, 3947452, 2548636, 4451410,11561994, 7873170,11533357,  542098,
     6777209, 6967088, 7576156, 7497707,11414741, 6176369, 9151905, 2889825,
     7795871, 3744802,10670181, 7568833, 5623019,11494173, 2510983, 6812231,
     3932731,10780049,11695063, 5938867, 8351338, 1944486, 5788867, 5951305,
    11535466, 1082002,  992765, 2148071, 9906671, 4110097, 8185789, 7563898,
     4359659,   73727, 6874123, 7777094,10937879, 4099587, 5495229, 2779911,
     3657865,  414298,10060376, 7458610, 1405909,11913023, 1736682,  590999,
     7295876, 7745961, 2967831, 3765429, 3950704, 3381148, 1574680, 7118443,
    10323069, 2708084, 9270131, 9155703, 3862113, 4701830, 3669580, 3413338,
     9815320, 4724219, 9401164, 6700184,11248666,11661125, 9250728, 4188535,
     4265939,   81385, 8834571, 5652244, 6975784, 9802332, 1399291,10218815,
       19038, 4873728,11675501,  930995,10334929, 5744244, 6527806, 3119865,
     6686166, 7660058, 4976641, 2021262, 1443545, 9547850, 8251833,  471184,
      623214, 3542927, 6990137, 1476711, 6038357, 9820800, 6127099, 8538774,
     1928146, 1605827, 3092086,11574731,11133842, 6266159, 8138167, 7372655,
     3401407, 6760984, 2813488,  253588, 4918583,11158392,  550970, 9048441,
      403019, 7172952,  277395,11013175,11375374, 8098406, 9193828, 1622124,
     7264118,11615902, 9673629, 4451290,11531274,    8850, 2265600, 3994128,
     2497703, 3412551, 9613848, 1147343, 5720072,  339774, 2982221, 7449269,
    11014602,11740686, 5618366,10303005, 9571689, 2354628, 2785318, 5042057,
     6767769, 4550448,  915755, 6433489, 2974691, 5521589, 9528071, 3188409,
      233452,11763756,11524286,10219911,  299614, 4701250, 3521100, 1402425,
    11021119, 1409049,  716874, 3519909, 1097529, 4967677,11726467, 1978302,
     2445774, 2118716, 2391791,  299057, 4558658, 3017515, 4484544, 8044309,
     7344985, 8317876, 5378203, 8821222, 2234900, 8134917, 6540655, 6409209,
     8759000,10306046,10350185, 9649780,10345935, 8561780, 7817682, 9328418,
       77197, 7762443, 7187223, 3930771,10278289, 3244393, 2565367, 8734546,
     4045822, 3731378, 7233637, 3812766, 4068987, 9661618, 1376474, 4377663,
     4682751,10785345, 1050850, 5017842,  568729, 1594756,  257910, 6025015,
     6405248, 7744984, 2717719,11736691, 4595646,  486454, 4532334, 8278560,
     7313296,  205492, 4605996, 3136054,10830550,  623341, 3575439, 3313220,
};


int creat_sign_t256(char *psrc, int slen, unsigned int* psign1, unsigned int* psign2)
{
    unsigned char *psrc0;
    unsigned char psrc1[256];
    unsigned char prearr1[256]; 
    unsigned char psrc2[256];
    unsigned char prearr2[256]; 
    unsigned int sign0, sign1, sign2; 
    int i, j1, j2;

/* init vars */
    psrc0 = (unsigned char *)psrc;
    *psign1 = 0;
    *psign2 = 0;

/* check the string length */
    if ((slen >256) || (slen<0)){
/*  comment for using new lib   
        sprintf(inf_buf, "string too long (%d>256)\n", slen);
        writelog(pf_log, inf_buf, IPROG);
*/
        ul_writelog(UL_LOG_WARNING,"string too long (%d > 256 )\n",slen);
        *psign1=0xffffffff;
        *psign2=0xffffffff;
        return -1;
    }

    if (slen == 0){
        return 0;
    }

/* sign the short string */
    if (slen <= 4){
        memcpy(psign1, psrc, slen);
        return 1;
    }

    if ((slen > 4) && (slen <= 8)){
        memcpy(psign1, psrc, 4);
        memcpy(psign2, psrc+4, slen-4);
        return 1;
    }

/* get the rearranged string */
    j1=0;
    j2=0;
    for (i=0; i<256; i++){
        if (rearr256_1[i] < slen){
            prearr1[j1++]=rearr256_1[i];
        }
        if (rearr256_2[i] < slen){
            prearr2[j2++]=rearr256_2[i];
        }
    }

    for (i=0; i<slen; i++){
        psrc1[i]= psrc0[prearr1[i]];
        psrc2[i]= psrc0[prearr2[i]];
    }

/* get source string's sign */
    sign0 = 0;
    for (i=0; i<slen; i++){
        sign0 += ( (unsigned char)psrc0[i] * remain256_0[i] )%MAX_PRIME_0;
        if (sign0 >= MAX_PRIME_0){
            sign0 -= MAX_PRIME_0;
        }
    }

/* get new 1 string's sign */
    sign1 = 0;
    for (i=0; i<slen; i++){
        sign1 += ( (unsigned char)psrc1[i] * remain256_1[i] )%MAX_PRIME_1;
        if (sign1 >= MAX_PRIME_1){
            sign1 -= MAX_PRIME_1;
        }
    }

/* get new 2 string's sign */
    sign2 = 0;
    for (i=0; i<slen; i++){
        sign2 += ( (unsigned char)psrc2[i] * remain256_2[i] )%MAX_PRIME_2;
        if (sign2 >= MAX_PRIME_2){
            sign2 -= MAX_PRIME_2;
        }
    }

/* get result */
    *psign1=sign0 ^ sign2<<20;
    *psign2=sign1 ^ (sign2<<8 & 0xfff00000);

/* debug */
#ifdef __DEBUG
    printf("trans1 :\n");
    for (i=0; i<slen; i++){
        printf("%d", prearr1[i]);
    }
    printf("\n");

    printf("newstr1 :\n");
    for (i=0; i<slen; i++){
        printf("%c", psrc1[i]);
    }
    printf("\n");

    printf("trans2 :\n");
    for (i=0; i<slen; i++){
        printf("%d", prearr2[i]);
    }
    printf("\n");

    printf("newstr2 :\n");
    for (i=0; i<slen; i++){
        printf("%c", psrc2[i]);
    }
    printf("\n");


    printf("source str : %s\n", psrc);
    printf("sign0 : %9u sign1 %9u   sign2 %9u\n", sign0, sign1, sign2);
    printf("psign1 : %9u    psign2 %9u\n", *psign1, *psign2);
#endif

/* return */
    return 1;
}

int creat_sign_f64(char* psrc,int slen,unsigned int* sign1,unsigned int * sign2)
{
    assert( strlen(psrc) == (unsigned int) slen);
    *sign1=0;
    *sign2=0;
    if( slen <= 4 )
    {
        memcpy(sign1,psrc,slen);
        return 1;
    }
    else 
        if(slen<=8)
        {
            memcpy(sign1,psrc,4);
            memcpy(sign2,psrc+4,slen-4);
            return 1;
        }
        else
        {
            (*sign1)=getsign_24_1(psrc);
            (*sign2)=getsign_24_2(psrc);
            return 1;
        }
}


int creat_sign_fs64(char* psrc,int slen,unsigned int* sign1,unsigned int * sign2)
{
    *sign1=0;
    *sign2=0;
    if( slen <= 4 )
    {
        memcpy(sign1,psrc,slen);
        return 1;
    }
    else 
        if(slen<=8)
        {
            memcpy(sign1,psrc,4);
            memcpy(sign2,psrc+4,slen-4);
            return 1;
        }
        else
        {
            (*sign1)=getsigns_24_1(psrc,slen);
            (*sign2)=getsigns_24_2(psrc,slen);
            return 1;
        }
}

int creat_sign_7_host(char* psrc,int slen,unsigned int* sign1,unsigned int * sign2)
{
    assert( strlen(psrc) == (unsigned int) slen);
    *sign1=0;
    *sign2=0;
    if( slen <= 4 )
    {
        memcpy(sign1,psrc,slen);
        return 1;
    }
    else 
        if(slen<=7)
        {
            memcpy(sign1,psrc,4);
            memcpy(sign2,psrc+4,slen-4);
            return 1;
        }
        else
        {
            (*sign1)=getsign_24_1(psrc);
            (*sign2)=getsign_24_2(psrc);
            (*sign2)&=0x00FFFFFF;
            return 1;
        }
}

int creat_sign_md64(char* psrc,int slen,unsigned int* sign1,unsigned int*sign2)
{
    unsigned int md5res[4];
    assert(psrc[slen]==0);
    MD5((unsigned char*)psrc,(unsigned int)slen,(unsigned char*)md5res);
    *sign1=md5res[0]+md5res[1];
    *sign2=md5res[2]+md5res[3];
    return 1;
}

int creat_sign_mds64(char* psrc,int slen,unsigned int* sign1,unsigned int*sign2)
{
    unsigned int md5res[4];

    MD5((unsigned char*)psrc,(unsigned int)slen,(unsigned char*)md5res);
    *sign1=md5res[0]+md5res[1];
    *sign2=md5res[2]+md5res[3];
    return 1;
}

//-----------------------------------------------------------------------------
// MurmurHash2, 64-bit versions, by Austin Appleby

// The same caveats as 32-bit MurmurHash2 apply here - beware of alignment 
// and endian-ness issues if used across multiple platforms.
//please google it..

static unsigned long long MurmurHash64 ( const void * key, int len, unsigned int seed )
{
    const unsigned long long m = 0xc6a4a7935bd1e995;
    const int r = 47;

    unsigned long long h = seed ^ (len * m);

    const unsigned long long * data = (const unsigned long long *)key;
    const unsigned long long * end = data + (len/8);

    while(data != end)
        {
            unsigned long long k = *data++;

            k *= m; 
            k ^= k >> r; 
            k *= m; 
            
            h ^= k;
            h *= m; 
        }

    const unsigned char * data2 = (const unsigned char*)data;

    switch(len & 7)
        {
        case 7: h ^= (unsigned long long)(data2[6]) << 48;
        case 6: h ^= (unsigned long long)(data2[5]) << 40;
        case 5: h ^= (unsigned long long)(data2[4]) << 32;
        case 4: h ^= (unsigned long long)(data2[3]) << 24;
        case 3: h ^= (unsigned long long)(data2[2]) << 16;
        case 2: h ^= (unsigned long long)(data2[1]) << 8;
        case 1: h ^= (unsigned long long)(data2[0]);
            h *= m;
        };
 
    h ^= h >> r;
    h *= m;
    h ^= h >> r;

    return h;
} 

//Murmur Hash Function.

int creat_sign_murmur64(const char *psrc,int slen,unsigned int *sign1,unsigned int *sign2,unsigned int seed){
    assert(psrc[slen]==0);
    unsigned long long res=MurmurHash64(psrc,slen,seed);
    *sign1=(res >> 32);
    *sign2=(res & 0x0ffffffff);
    return 1;
}

int creat_sign_murmurs64(const char *psrc,int slen,unsigned int *sign1,unsigned int *sign2,unsigned int seed){
    unsigned long long res=MurmurHash64(psrc,slen,seed);
    *sign1=(res>>32);
    *sign2=(res & 0x0ffffffff);
    return 1;
}
